input_var

action{
  type,
  x,
  y,
}
//map info
gridsize{
  x=9,
  y=9,
}

safe_per_mine = 3;

map[][];


def generate_map(gridsize.x, gridsize.y, safe_per_mine){
    for i in range(gridsize.x):
        for j in range(gridsize.y):
            if (randint(1, safe_per_mine + 1)) 
              global map[i][j] == 1,0,"h"; //mine or not, neighbors (calculated later), status (h --> hidden) 
            else 
              global map[i][j] == 0,0,"h";
  //FIXME: should probably return the map instead but we'll look at that later
}
    
    
//map into end

def ask_player(){
  global input_var = input();
}

def is_input_valid(input_var){ //FIXME: break into smaller pieces
  if input.regex(^[a-z][1-{}]:[1-{}]$, gridsize.x , gridsize.y)
    return true;
  else
    return false;
}
def set_action(input_var){
    global action.type  =  input(0)
    global action.x     =  input(1 to ":")
    global action.y     =  input(":" to last_character)
}

game_loop{

}
